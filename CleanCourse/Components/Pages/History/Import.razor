@page "/history/import"
@using Services.CheckingHistories
@using Services.CheckingHistories.Models
@using Services.Metadata
@using Services.CheckingHistories.Services
@using Services.WordAndHistory
@inject AppState appState
@inject IWordHistoryService service
@inject NavigationManager navigationManager


<h3>单词/词语</h3>

<p>为当前教材批量导入单词/词语的检查记录。<a href="/words" class="btn btn-outline-primary" data-mdb-ripple-init>返回</a></p>
<hr class="hr" />
<EditForm Model="@Model" OnValidSubmit="@Submit" FormName="ImportHistory">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <table class="table">
        <tr class="form-group">
            <td class="m-2">
                <label class="form-label">
                    课程：
                </label>
                <select @bind="Model.Course" class="form-select">
                    @foreach (var course in Courses)
                    {
                        <option value="@course.Key">@course.Value</option>
                    }
                </select>
            </td>
            <td>
                <label class="form-label">
                    处理方式：
                </label>
                <select @bind="Model.Overwrite" class="form-select">
                    @foreach (var option in ImportOptions)
                    {
                        <option value="@option.Key">@option.Value</option>
                    }
                </select>
            </td>
        </tr>
    </table>
    <div class="form-group">
        <label class="form-label">单词/词语的历史记录：</label>
        <textarea @bind="Model!.Content" class="form-control rounded" rows="8" cols="100" placeholder="请从Excel/Csv复制多行粘贴到这里，每一行分别为：序号(可空);词语；注音(可空)；单元；课程（可空)；1 / 其他数字 （1表示正确的听写记录，其他表示错误）； 1 / 其他数字； 。。" />
    </div>
    <table class="table">
        <tr class="form-group">
            <td class="m-2">
                <label class="form-label"></label>
                <div class="form-floating">
                    <button type="button" @onclick="@(e => Preview())" class="form-control btn btn-outline-info m-1">
                        预览
                    </button>
                </div>
            </td>
        @if(previewWords != null)
        {
            <td>
                <label class="form-label"></label>
                <div class="form-floating">
                    <button type="button" @onclick="@(e => Clean())" class="form-control btn btn-outline-info m-2">
                        清除
                    </button>
                </div>
            </td>
        }
            <td>
                <label class="form-label"></label>
                <div class="form-floating">
                    <button type="submit" class="form-control btn btn-outline-primary m-1" data-mdb-ripple-init>
                        保存
                    </button>
                </div>
            </td>
        </tr>
    </table>
</EditForm>

@if (previewWords != null && previewWords.Any())
{
    <hr class="hr" />
    <table class="table">
        <thead class="thead-light">
            <tr>
                <th>#</th>
                <th>单词/词语</th>
                <th>翻译/拼音</th>
                <th>单元</th>
                <th>课程</th>
                <th>检查情况</th>
            </tr>
        </thead>
        <tbody>
            @{
                var x = 1;
            }
            @foreach (var word in currentItems)
            {
                <tr>
                    <td>@(x++)</td>
                    <td>@word.Content</td>
                    <td>@word.Explanation</td>
                    <td>@word.Unit</td>
                    <td>@word.Course</td>
                    <td>@word.CheckingHistorySummary</td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @if (pageIndex > 1)
            {
                <li class="page-item"><text id="pg-0" class="page-link" @onclick="@(e => ChangePage(pageIndex-1))">&lt;&lt;</text></li>
            }
            <li class="page-item"><text id="pg-@(pageIndex)" class="page-link">第 @(pageIndex)/@(totalPage) 页</text></li>
            @if (pageIndex < totalPage)
            {
                <li class="page-item"><text id="pg-99" class="page-link" @onclick="@(e => ChangePage(pageIndex+1))">>></text></li>
            }
        </ul>
    </nav>
}

@code {

    [SupplyParameterFromForm]
    public ImportCheckingHistoryModel Model { get; set; }

    private Dictionary<string, string> Courses;
    private Dictionary<string, string> ImportOptions;
    private IList<WordModel> previewWords;

    private int pageIndex;
    private int totalPage;
    private int pageSize;
    private IList<WordModel> currentItems;

    public Import()
    {
        Courses = MetadataService.GetDefaultCourses().Where(x => !string.IsNullOrEmpty(x.Key)).ToDictionary();
        ImportOptions = MetadataService.GetDefaultImportOption();
    }

    protected override void OnInitialized()
    {
        Model = new ImportCheckingHistoryModel()
            {
                SharedCode = appState.SharedCode,
                KidId = appState.KidId,
                Course = Courses.First().Key,
                Overwrite = ImportOptions.First().Key,
            };

        pageSize = appState.DefaultPageSize;
    }

    private async Task Submit()
    {
        await service.ImportHistoryAsync(Model);
        navigationManager.NavigateTo($"/words");
    }

    private async Task Preview()
    {
        if (string.IsNullOrWhiteSpace(Model.Content))
        {
            return;
        }

        previewWords = await service.PreviewHistoryAsync(Model);
        totalPage = (int)Math.Ceiling(previewWords.Count * 1.0 / pageSize);
        ChangePage(1);
    }

    private void ChangePage(int i)
    {
        if (i < 1)
        {
            i = 1;
        }

        if (i > totalPage)
        {
            i = totalPage;
        }

        pageIndex = i;
        currentItems = previewWords.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
    }

    private void Clean()
    {
        currentItems.Clear();
        previewWords.Clear();
    }
}