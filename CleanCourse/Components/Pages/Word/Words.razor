@page "/words"
@using Services.CheckingHistories.Models
@using Services.Words
@using Services.Words.Models
@using Services.Metadata
@using Services.Words.Services
@inject IWordService service
@inject IWordHistoryService historyService
@inject IJSRuntime JSRuntime
@inject AppState appState
@inject NavigationManager navigationManager

<h3>单词/词语</h3>

<p>查询所有单词/词语信息。<a href="/history/import" class="btn btn-outline-primary" data-mdb-ripple-init>导入检查记录</a></p>
<hr class="hr" />
<EditForm Model="@Model" OnValidSubmit="@Submit" FormName="SearchWords">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText @bind-Value="Model!.SharedCode" hidden="hidden"/>
    <InputNumber @bind-Value="Model.KidId" hidden="hidden" />
    <table class="row gy-3 pe-1">
        <thead>
            <tr class="form-group">
                <th ></th>
                <th ></th>
            </tr>
        </thead>
        <tbody>
            <tr class="form-group">
                <td class="m-2">
                    <div >
                        <label class="form-label">课程：</label>
                        <select @bind="Model.Course" class="form-select small">
                            @foreach (var course in Courses)
                            {
                                <option value="@course.Key">@course.Value</option>
                            }
                        </select>
                    </div>
                </td>
                <td>
                    <div>
                        <label class="form-label">
                            单元：
                        </label>
                        <select @bind="Model.Unit" class="form-select">
                            @foreach (var unit in Units)
                            {
                                <option value="@unit.Key">@unit.Value</option>
                            }
                        </select>
                    </div>
                </td>
            </tr>
            <tr class="form-group">
                <td class="m-2">
                    <div>
                        <label class="form-label">单词/词语：</label>
                        <InputText @bind-Value="Model!.Content" class="form-control rounded" />
                    </div>
                </td>
                <td>
                    <div>
                        <label class="form-label">翻译/拼音：</label>
                        <InputText @bind-Value="Model!.Explanation" class="form-control rounded" />
                    </div>
                </td>
            </tr>
            <tr class="form-group">
                <td class="m-2">
                    <div>
                        <label class="form-label">检查情况：</label>

                        <select @bind="Model.CheckingResult" class="form-select" aria-describedby="search-addon">
                            @{
                                int index = 0;
                            }
                            @foreach (var status in CheckingStatuses)
                            {
                                <option value="@index">@status</option>
                                index++;
                            }
                        </select>
                    </div>
                </td>
                <td>
                    <div>
                        <label class="form-label"></label>
                        <button type="submit" class="form-control btn btn-outline-primary" data-mdb-ripple-init>查询</button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</EditForm>
<hr class="hr" />
@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
        <thead class="thead-light">
            <tr>
                <th class="w-5">#</th>
                <th class="w-25">单词/词语</th>
                <th class="w-25">翻译/拼音</th>
                <th class="w-25">课程/单元</th>
                <th class="w-25">检查情况</th>
            </tr>
        </thead>
        <tbody>
            @{
                var x = 1;
            }
            @foreach (var word in currentItems)
            {
                <tr>
                    <td>@(x++)</td>
                    <td><a href="/history/@word.WordId" class="text-info">@word.Content</a></td>
                    <td>@word.Explanation</td>
                    <td>@word.Course/@word.Unit</td>
                    <td>
                        @word.CheckingHistorySummary
                   </td>
                </tr>
                @if (!checkedWords.Contains(word.WordId))
                {
                    <tr>
                        <td></td>
                        <td>
                            <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Correct))" class="btn btn-success m-2 btn-sm">
                                正确
                            </button>
                        </td>
                        <td>
                            <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Incorrect))" class="btn btn-warning m-2 btn-sm">
                                错误
                            </button>
                        </td>
                        
                        @if (word.IsEnglish())
                        {
                            <td>
                                <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Writing))" class="btn btn-danger m-1 btn-sm">
                                    拼写 错误
                                </button>
                            </td>
                            <td>
                                <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Translation))" class="btn btn-danger m-1 btn-sm">
                                    翻译 错误
                                </button>
                            </td>
                        }
                        else if (word.IsChinese())
                        {
                            <td>
                                <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Word))" class="btn btn-danger m-1 btn-sm">
                                    文字 错误
                                </button>
                            </td>
                            <td>
                                <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Pinyin))" class="btn btn-danger m-1 btn-sm">
                                    拼音 错误
                                </button>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @if(pageIndex >1){
                <li class="page-item"><text id="pg-0" class="page-link" @onclick="@(e => ChangePage(pageIndex-1))">&lt;&lt;</text></li>
            }
            <li class="page-item"><text id="pg-@(pageIndex)" class="page-link">第 @(pageIndex)/@(totalPage) 页</text></li>
            @if (pageIndex < totalPage)
            {
                <li class="page-item"><text id="pg-99" class="page-link" @onclick="@(e => ChangePage(pageIndex+1))">>></text></li>
            }
        </ul>
    </nav>
}

@code {

    [SupplyParameterFromForm]
    public SearchWordsCriteria Model { get; set; }

    private SearchWordsResult result;

    private Dictionary<string, string> Courses;
    private Dictionary<int, string> Units;
    private string[] CheckingStatuses;

    private List<int> checkedWords;

    private int pageIndex;
    private int totalPage;
    private int pageSize;
    private IList<WordModel> currentItems;


    public Words()
    {
        checkedWords = new List<int>();
        Courses = MetadataService.GetDefaultCourses();
        Units = MetadataService.GetDefaultUnits();
        CheckingStatuses = MetadataService.GetDefaultCheckingStatuses();
        Model = new SearchWordsCriteria();
    }

    protected override async Task OnInitializedAsync()
    {
        pageSize = appState.DefaultPageSize;
        if (string.IsNullOrEmpty(appState.SharedCode))
        {
            navigationManager.NavigateTo("/bookCategories", true);
            return;
        }

        if (appState.KidId <= 0)
        {
            navigationManager.NavigateTo("/kids", true);
            return;
        }

        Model.SharedCode = appState.SharedCode;
        Model.KidId = appState.KidId;

        result = await service.GetWordsAsync(Model);
        Refresh(1);
    }

    private async Task Submit()
    {
        checkedWords = new List<int>();
        result = await service.GetWordsAsync(Model);
        Refresh(1);
    }

    private async Task SaveCheckingStatus(int id, CheckingRemark status)
    {
        await historyService.SaveCheckingStatusAsync(id, appState.KidId, status);
        checkedWords.Add(id);
    }

    private void Refresh(int page)
    {
        totalPage = (int)Math.Ceiling(result.Count * 1.0 / pageSize);
        ChangePage(page);
    }

    private void ChangePage(int i)
    {
        if (i < 1)
        {
            i = 1;
        }

        if (i > totalPage)
        {
            i = totalPage;
        }

        pageIndex = i;
        currentItems = result.Words.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
    }
}
