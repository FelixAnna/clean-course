@page "/history/add"
@using Services.CheckingHistories.Models
@using Services.CheckingHistories
@using Services.Metadata
@using Services.CheckingHistories.Services
@using System.Text
@using Services.WordAndHistory.Services
@inject IWordHistoryBatchService historyService
@inject IWordPreCheckService preCheckService
@inject IJSRuntime JSRuntime
@inject AppState appState
@inject NavigationManager navigationManager

<h3>听写</h3>

<p>新增听写信息。</p>
<hr class="hr" />
<table class="row gy-3 pe-1">
    <thead>
        <tr class="form-group">
            <th ></th>
            <th ></th>
        </tr>
    </thead>
    <tbody>
        <tr class="form-group">
            <td class="col-md-4">
                <div >
                    <label class="form-label">宝宝：</label>
                    <span class="text-primary">@appState.KidName</span>
                </div>
            </td>
            <td class="col-md-4">
                <div>
                    <label class="form-label">
                        教材：
                    </label>
                    <span class="text-primary"><a href="/bookCategories/@(appState.BookCategoryId)/info">@appState.BookCategoryFullName</a></span>
                </div>
            </td>
        </tr>
        @if (currentItems != null && currentItems.Count>0)
        {
            <tr class="form-group">
                <td class="col-md-4">
                    <div>
                        <button @onclick="@(e => CopyWords())" class="btn btn-info m-2 btn-sm">
                            复制词条
                        </button>
                    </div>
                </td>
                <td class="col-md-4">
                    @if (errorWords != null && errorWords.Any())
                    {
                        <div>
                            <button @onclick="@(e => CopyErrorWords())" class="btn btn-secondary m-2 btn-sm">
                                复制错误内容
                            </button>
                        </div>
                    } else {
                        <div>
                            <button @onclick="@(e => CopyAll())" class="btn btn-secondary m-2 btn-sm">
                            复制全部内容
                        </button>
                    </div>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<hr class="hr" />
@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
        <thead class="thead-light">
            <tr>
                <th class="w-auto">#</th>
                <th class="w-auto">主题</th>
                <th class="w-auto">备注</th>
                <th class="w-auto">课程/单元</th>
                <th class="w-auto">检查情况</th>
                <th class="w-auto"></th>
            </tr>
        </thead>
        <tbody>
            @{
                var x = 1;
            }
            @foreach (var word in currentItems)
            {
                <tr>
                    <td class="w-auto">@(x++)</td>
                    @if (word.IsMath())
                    {
                        <td class="w-auto"><a href="/history/@word.WordId" class="text-info">@word.Content</a></td>
                        <td class="w-auto">@word.Details</td>
                    }
                    else
                    {
                        <td class="w-auto"><a href="/history/@word.WordId" class="text-info">@word.Content</a></td>
                        <td class="w-auto">@word.Explanation</td>
                    }
                    <td class="w-auto">@word.BookId/@word.Unit</td>
                    <td class="w-auto">
                        @word.CheckingHistorySummary
                   </td>
                    <td class="w-auto">
                    @if (!checkedWords.Contains(word.WordId))
                        {
                            <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Correct))" class="btn btn-success mx-2 btn-sm">
                                正确
                            </button>
                            <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Incorrect))" class="btn btn-warning mx-2 btn-sm">
                                错误
                            </button>
                            @if(word.IsLongText() && !word.IsMath())
                            {
                                <a class="btn btn-danger mx-3 btn-sm" href="/books/@(word.BookId)/words/@(word.WordId)/addhoc">记录为新的错字</a>
                            }else if (word.IsEnglish())
                            {
                                <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Writing))" class="btn btn-danger mx-3 btn-sm">
                                    拼写 错误
                                </button>

                                <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Translation))" class="btn btn-danger mx-1 btn-sm">
                                    翻译 错误
                                </button>
                            }
                            else if (word.IsChinese())
                            {
                                <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Word))" class="btn btn-danger mx-3 btn-sm">
                                    文字 错误
                                </button>
                                <button @onclick="@(e => SaveCheckingStatus(word.WordId, CheckingRemark.Pinyin))" class="btn btn-danger mx-1 btn-sm">
                                    拼音 错误
                                </button>
                            }
                            <button @onclick="@(e => CancelChecking(word.WordId))" class="btn btn-secondary mx-3 btn-sm">
                                取消
                            </button>
                        }
                    </td>
                </tr>
                }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @if(pageIndex >1){
                <li class="page-item"><text id="pg-0" class="page-link" @onclick="@(e => ChangePage(pageIndex-1))">&lt;&lt;</text></li>
            }
            <li class="page-item"><text id="pg-@(pageIndex)" class="page-link">第 @(pageIndex)/@(totalPage) 页</text></li>
            @if (pageIndex < totalPage)
            {
                <li class="page-item"><text id="pg-99" class="page-link" @onclick="@(e => ChangePage(pageIndex+1))">>></text></li>
            }
        </ul>
    </nav>
}

@code {
    static string Splitter = ",";
    static string WordSplitter = Environment.NewLine;
    private SearchWordAndHistoryResult result;

    private List<int> checkedWords;
    private List<int> errorWords;

    private int pageIndex;
    private int totalPage;
    private int pageSize;
    private IList<CheckingHistoryModel> currentItems;


    public Add()
    {
        checkedWords = new List<int>();
        errorWords = new List<int>();
    }

    protected override async Task OnInitializedAsync()
    {
        pageSize = appState.DefaultPageSize;

        if (appState.KidId <= 0)
        {
            navigationManager.NavigateTo("/kids", true);
            return;
        }

        result = await preCheckService.GetAllAsync(appState.KidId, appState.BookCategoryId);
        Refresh(1);
    }

    private async Task SaveCheckingStatus(int id, CheckingRemark status)
    {
        await historyService.SaveCheckingStatusAsync(id, appState.KidId, status);

        checkedWords.Add(id);
        if (status != CheckingRemark.Correct)
        {
            errorWords.Add(id);
        }

        CancelChecking(id);
    }

    private void CancelChecking(int id)
    {
        preCheckService.Remove(appState.KidId, id);
        result.Words = result.Words.Where(x => x.WordId != id).ToArray();
        result.Count = result.Words.Count();
        Refresh(pageIndex);
    }

    private void Refresh(int page)
    {
        totalPage = (int)Math.Ceiling(result.Count * 1.0 / pageSize);
        ChangePage(page);
    }

    private void ChangePage(int i)
    {
        if (i < 1)
        {
            i = 1;
        }

        if (i > totalPage)
        {
            i = totalPage;
        }

        pageIndex = i;
        currentItems = result.Words.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
    }

    private async Task CopyWords()
    {
        var contentBuilder = new StringBuilder();
        foreach (var word in result.Words)
        {
            if (word.IsEnglish())
            {
                contentBuilder.Append(word.Explanation);
            }else if (word.IsMath())
            {
                contentBuilder.Append(word.Details);
            }
            else
            {
                contentBuilder.Append(word.Content);
            }
            contentBuilder.Append(WordSplitter);
        }

        await Clipboard.SetTextAsync(contentBuilder.ToString());
        await JSRuntime.InvokeAsync<object>("alert", "复制成功。");
    }

    private async Task CopyAll()
    {
        var contentBuilder = new StringBuilder();

        foreach (var word in result.Words)
        {
            contentBuilder.Append(word.Content);
            contentBuilder.Append(Splitter);
            contentBuilder.Append(word.Explanation);
            contentBuilder.Append(Splitter);
            contentBuilder.Append(word.Details);
            contentBuilder.Append(WordSplitter);
        }

        await Clipboard.SetTextAsync(contentBuilder.ToString());
        await JSRuntime.InvokeAsync<object>("alert", "复制成功。");
    }

    private async Task CopyErrorWords()
    {
        var contentBuilder = new StringBuilder();

        foreach (var word in result.Words)
        {
            if (errorWords.Contains(word.WordId))
            {
                contentBuilder.Append(word.Content);
                contentBuilder.Append(Splitter);
                contentBuilder.Append(word.Explanation);
                contentBuilder.Append(WordSplitter);
            }
        }

        await Clipboard.SetTextAsync(contentBuilder.ToString());
        await JSRuntime.InvokeAsync<object>("alert", "复制成功。");
    }

}