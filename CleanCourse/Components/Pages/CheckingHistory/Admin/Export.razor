@page "/history/export"
@using Services.CheckingHistories;
@using Services.BookCategories
@using Services.Metadata;
@using Services.CheckingHistories.Services;
@using Services.CheckingHistories.Models;
@using Services.CheckingHistories.Models.Admin;
@using Services.BookCategoryMappings
@inject IBookCategoryMappingService mappingService
@inject AppState appState
@inject IWordHistoryBatchService service
@inject IBookCategoryService categoryService
@inject NavigationManager navigationManager


<h3>检查记录</h3>

<p>批量导出词条的检查记录。</p>
<hr class="hr" />
<EditForm Model="@Model" OnValidSubmit="@Submit" FormName="ExportHistory">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <table class="table">
        <tr class="form-group">
            <td class="m-2">
                <div class="flex-row">
                    <label class="form-label">课程：</label>
                    <select @bind="Model.BookId" class="form-select small">
                        @foreach (var course in Courses)
                        {
                            <option value="@course.Key">@course.Value</option>
                        }
                    </select>
                </div>
            </td>
            <td>
                <label class="form-label"></label>
                <button type="submit" class="form-control btn btn-outline-primary m-1" data-mdb-ripple-init>
                    保存
                </button>
            </td>
        </tr>
    </table>
    <div class="form-group">
        <label class="form-label">词条的历史记录：</label>
        <textarea @bind="Content" class="form-control rounded" rows="8" cols="100" placeholder="导出的结果会在这里，可以直接粘贴到Excel 或 CSV文件里" />
    </div>
</EditForm>
@code {

    [SupplyParameterFromForm]
    public ExportCheckingHistoryCriteria Model { get; set; }

    private Dictionary<int, string> Courses;
    private string Content;

    public Export()
    {
        Courses = new Dictionary<int, string>();
    }

    protected override async Task OnInitializedAsync()
    {
        Model = new ExportCheckingHistoryCriteria()
        {
            BookCategoryId =appState.BookCategoryId,
            KidId = appState.KidId,
        };

        var mappings = await mappingService.GetByBookCategoryIdAsync(Model.BookCategoryId);
        Courses = mappings.LinkedBooks.Distinct().ToDictionary(x => x.BookId, y => y.BookName);
        Courses = Courses.Prepend(new KeyValuePair<int, string>(-1, "全部")).ToDictionary();
    }

    private async Task Submit()
    {
        Content = await service.ExportCheckingStatusAsync(Model);
    }
}