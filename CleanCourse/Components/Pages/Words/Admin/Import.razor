@page "/books/{bookId:int}/words/import"
@using Services.Books
@using Services.Metadata
@using Services.BookCategories.Models
@using Services.Words
@using Services.Words.Models
@inject AppState appState
@inject IWordBatchService importService
@inject IBookService bookService
@inject NavigationManager navigationManager

<h3>词条</h3>

<p>为当前课本(<span class="text-primary"><a href="/books/@bookId/info" class="text-info">@Model.BookName</a></span>)批量导入词条。</p>
<hr class="hr" />
<EditForm Model="@Model" OnValidSubmit="@Submit" FormName="ImportWord">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <table class="table">
        <tr class="form-group">
            <td>
                <label class="form-label">
                    导入类型：
                </label>
                <select @bind="Model.Source" class="form-select">
                    <option value="pdf" selected="selected">从PDF复制后导入</option>
                    <option value="excel">从Excel复制后导入</option>
                </select>
            </td>
            <td>
                <label class="form-label">
                    重复处理：
                </label>
                <select @bind="Model.Overwrite" class="form-select">
                    @foreach (var option in DuplicateOptions)
                    {
                        <option value="@option.Key">@option.Value</option>
                    }
                </select>
            </td>
        </tr>
    </table>

    <div class="form-group">
        <label class="form-label">词条：</label>
        <textarea @bind="Model!.Content" class="form-control rounded" rows="8" placeholder="PDF请从中小学智慧教育平台(https://basic.smartedu.cn/)下载课本后，完整复制生字表内容；Excel/Csv每一行分别为：序号(可空)\t词语\t注音(翻译)\t详细描述(可空)\t单元\t课程" />
    </div>
    <table class="table">
        <tr class="form-group">
            <td class="m-2">
                <label class="form-label"></label>
                <button type="button" @onclick="@(e => Preview())" class="form-control btn btn-outline-info m-1">
                    预览
                </button>
            </td>
            @if (previewWords != null)
            {
                <td>
                    <label class="form-label"></label>
                    <button type="button" @onclick="@(e => Clean())" class="form-control btn btn-outline-info m-2">
                        清除
                    </button>
                </td>
            }
            <td>
                <label class="form-label"></label>
                <button type="submit" class="form-control btn btn-outline-primary m-1" data-mdb-ripple-init>
                    保存
                </button>
            </td>
        </tr>
    </table>
</EditForm>

@if (previewWords != null && previewWords.Any())
{
    <hr class="hr" />
    <table class="table">
        <thead class="thead-light">
            <tr>
                <th>#</th>
                <th>词条</th>
                <th>备注</th>
                <th>详细(字数）</th>
                <th>单元</th>
            </tr>
        </thead>
        <tbody>
            @{
                var x = 1;
            }
            @foreach (var word in currentItems)
            {
                <tr>
                    <td>@(x++)</td>
                    <td>@word.Content</td>
                    <td>@word.Explanation</td>
                    <td>@(string.IsNullOrEmpty(word.Details)?"--":word.Details.Length)</td>
                    <td>@word.Unit</td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @if (pageIndex > 1)
            {
                <li class="page-item"><text id="pg-0" class="page-link" @onclick="@(e => ChangePage(pageIndex-1))">&lt;&lt;</text></li>
            }
            <li class="page-item"><text id="pg-@(pageIndex)" class="page-link">第 @(pageIndex)/@(totalPage) 页</text></li>
            @if (pageIndex < totalPage)
            {
                <li class="page-item"><text id="pg-99" class="page-link" @onclick="@(e => ChangePage(pageIndex+1))">>></text></li>
            }
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int bookId { get; set; }

    [SupplyParameterFromForm]
    public ImportWordsModel Model { get; set; }

    private Dictionary<string, string> DuplicateOptions;
    private IList<WordModel> previewWords;

    private int pageIndex;
    private int totalPage;
    private int pageSize;
    private IList<WordModel> currentItems;

    public Import()
    {
        DuplicateOptions = MetadataService.GetDefaultDuplicateOption();
    }

    protected override async void OnInitialized()
    {
        var book = await bookService.GetByIdAsync(bookId);

        Model = new ImportWordsModel()
            {
                BookId = bookId,
                BookName = book.FriendlyName,
                Book = book,
                Overwrite = DuplicateOptions.First().Key,
                Source = "pdf"
            };

        pageSize = appState.DefaultPageSize;
    }

    private async Task Submit()
    {
        await importService.ImportWordsAsync(Model);
        navigationManager.NavigateTo($"/books/{bookId}/words");
    }

    private async Task Preview()
    {
        if (string.IsNullOrWhiteSpace(Model.Content))
        {
            return;
        }

        previewWords = await importService.PreviewWordsAsync(Model);
        totalPage = (int)Math.Ceiling(previewWords.Count * 1.0 / pageSize);
        ChangePage(1);
    }

    private void ChangePage(int i)
    {
        if (i < 1)
        {
            i = 1;
        }

        if (i > totalPage)
        {
            i = totalPage;
        }

        pageIndex = i;
        currentItems = previewWords.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
    }

    private void Clean()
    {
        currentItems.Clear();
        previewWords.Clear();
    }
}