@page "/books/{bookId:int}/words"
@using Services.Books
@using Services.Words
@using Services.Words.Models
@using Services.Metadata
@inject IWordManageService service
@inject IBookService bookService
@inject IJSRuntime JSRuntime
@inject AppState appState
@inject NavigationManager navigationManager

<h3>字库</h3>

<p>
    查询当前课本(<a href="/books/@(bookId)/info">@Model.BookName</a>)词条信息。
    <a href="/books/@(bookId)/words/add" class="btn btn-outline-primary" data-mdb-ripple-init>新增</a>
    <a href="/books/@(bookId)/words/import" class="btn btn-outline-primary" data-mdb-ripple-init>导入</a>
</p>
<hr class="hr" />
<EditForm Model="@Model" OnValidSubmit="@Submit" FormName="SearchWords">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <table class="row gy-3 pe-1">
        <tbody>
            <tr class="form-group">
                <td>
                    <label class="form-label">
                        单元：
                    </label>
                    <select @bind="Model.Unit" class="form-select">
                        @foreach (var unit in Units)
                        {
                            <option value="@unit.Key">@unit.Value</option>
                        }
                    </select>
                </td>
                <td>
                    <label class="form-label">关键字：</label>
                    <InputText @bind-Value="Model!.Keyword" class="form-control rounded" />
                </td>
                <td>
                    <label class="form-label"></label>
                    <button type="submit" class="btn btn-primary form-control mx-3" data-mdb-ripple-init>查询</button>
                </td>
            </tr>
        </tbody>
    </table>
</EditForm>
<hr class="hr" />
@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="thead-light">
            <tr>
                <th>#</th>
                <th>词条</th>
                <th>备注</th>
                <th>单元</th>
                <th>课本</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{
                var x = 1;
            }
            @foreach (var word in currentItems)
            {
                <tr>
                    <td>@(x++)</td>
                    <td><a href="/history/@word.WordId/info" class="text-info">@word.Content</a></td>
                    <td>@word.Explanation</td>
                    <td>@word.Unit</td>
                    <td><a href="/books/@word.BookId/info" class="text-info">@word.Book.ShortName</a></td>
                    <td>
                        <a href="/books/@bookId/words/@(word.WordId)/update" class="btn btn-outline-primary m-1">更新</a>
                        <button @onclick="@(e => Delete(word.WordId, word.Content))" class="btn btn-outline-danger">
                            删除
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @if (Model.PageIndex > 1)
            {
                <li class="page-item"><text id="pg-0" class="page-link" @onclick="@(e => ChangePage(Model.PageIndex-1))">&lt;&lt;</text></li>
            }
            <li class="page-item"><text id="pg-@(Model.PageIndex)" class="page-link">第 @(Model.PageIndex)/@(totalPage) 页</text></li>
            @if (Model.PageIndex < totalPage)
            {
                <li class="page-item"><text id="pg-99" class="page-link" @onclick="@(e => ChangePage(Model.PageIndex+1))">>></text></li>
            }
        </ul>
    </nav>
}

@code {
    [Parameter]
    public int bookId { get; set; }

    [SupplyParameterFromForm]
    public SearchWordsCriteria Model { get; set; }

    private SearchWordsResult result;

    private Dictionary<int, string> Units;

    private int totalPage;
    private int pageSize;
    private IList<WordModel> currentItems;

    public Query()
    {
        Units = MetadataService.GetDefaultUnits();
        Model = new SearchWordsCriteria()
        {
            BookId = bookId,
        };
    }

    protected override async Task OnInitializedAsync()
    {
        pageSize = appState.DefaultPageSize;
        if (bookId<=0)
        {
            navigationManager.NavigateTo("/books", true);
            return;
        }
        var book = await bookService.GetByIdAsync(bookId);
        Model.BookId = bookId;
        Model.BookName = book.BookName;
        var lastSearchCriteria = appState.SearchWordsCriteria;
        if (lastSearchCriteria?.BookId == Model.BookId)
        {
            Model = lastSearchCriteria;
        }

        result = await service.GetWordsForBookCategoryAsync(Model);
        Refresh();
    }

    private async Task Submit()
    {
        Model.PageIndex = 1;
        result = await service.GetWordsForBookCategoryAsync(Model);
        Refresh();
    }

    private async Task Delete(int id, string content)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"删除字词也会清除所有与之关联的检查记录，您确定要删除： '{content}' 吗?"))
            return;

        if (await service.DeleteWordAsync(id))
        {
            result = new SearchWordsResult()
                {
                    Words = result.Words.Where(x => x.WordId != id).ToArray(),
                    Count = result.Count - 1,
                };
            Refresh();
        }
    }

    private void Refresh()
    {
        var pageIndex = Model.PageIndex;
        totalPage = (int)Math.Ceiling(result.Count * 1.0 / pageSize);
        ChangePage(pageIndex);

        appState.SearchWordsCriteria = Model;
    }

    private void ChangePage(int pageIndex)
    {
        if (pageIndex < 1)
        {
            pageIndex = 1;
        }

        if (pageIndex > totalPage)
        {
            pageIndex = totalPage;
        }

        Model.PageIndex = pageIndex;
        currentItems = result.Words.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
    }
}
