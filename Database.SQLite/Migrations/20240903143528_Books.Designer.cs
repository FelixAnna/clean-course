// <auto-generated />
using System;
using Database.SQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.SQLite.Migrations
{
    [DbContext(typeof(SQLiteCourseContext))]
    [Migration("20240903143528_Books")]
    partial class Books
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Entities.Entities.BookCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SharedCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("Entities.Entities.BookCategoryMappingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookCategoryId");

                    b.HasIndex("BookId");

                    b.ToTable("BookCategoryMappings");
                });

            modelBuilder.Entity("Entities.Entities.BookEntity", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuditYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Entities.Entities.CheckingHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KidId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("KidId");

                    b.HasIndex("WordId");

                    b.ToTable("CheckingHistories");
                });

            modelBuilder.Entity("Entities.Entities.KidEntity", b =>
                {
                    b.Property<int>("KidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartSchoolYear")
                        .HasColumnType("INTEGER");

                    b.HasKey("KidId");

                    b.ToTable("Kids");
                });

            modelBuilder.Entity("Entities.Entities.WordEntity", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookEntityBookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Unit")
                        .HasColumnType("INTEGER");

                    b.HasKey("WordId");

                    b.HasIndex("BookEntityBookId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("Entities.Entities.BookCategoryMappingsEntity", b =>
                {
                    b.HasOne("Entities.Entities.BookCategoryEntity", "BookCategory")
                        .WithMany()
                        .HasForeignKey("BookCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.BookEntity", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookCategory");
                });

            modelBuilder.Entity("Entities.Entities.CheckingHistoryEntity", b =>
                {
                    b.HasOne("Entities.Entities.KidEntity", "Kid")
                        .WithMany("CheckingHistories")
                        .HasForeignKey("KidId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.WordEntity", "Word")
                        .WithMany("CheckingHistories")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Kid");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Entities.Entities.WordEntity", b =>
                {
                    b.HasOne("Entities.Entities.BookEntity", null)
                        .WithMany("Words")
                        .HasForeignKey("BookEntityBookId");
                });

            modelBuilder.Entity("Entities.Entities.BookEntity", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("Entities.Entities.KidEntity", b =>
                {
                    b.Navigation("CheckingHistories");
                });

            modelBuilder.Entity("Entities.Entities.WordEntity", b =>
                {
                    b.Navigation("CheckingHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
